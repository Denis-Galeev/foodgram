# Generated by Django 3.2.3 on 2025-01-08 19:35

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'Пользователь с таким username уже существует!'}, help_text="Допустимы только латинские буквы, цифры и символы @/./+/-/_. Имя пользователя 'me' использовать нельзя!", max_length=150, unique=True, validators=[users.validators.UsernameValidator(), users.validators.validate_username], verbose_name='Имя пользователя')),
                ('first_name', models.CharField(help_text='Введите Имя', max_length=150, verbose_name='Имя')),
                ('last_name', models.CharField(help_text='Введите Фамилию', max_length=150, verbose_name='Фамилия')),
                ('email', models.EmailField(error_messages={'unique': 'Пользователь с таким email уже существует!'}, help_text='Введите свой email', max_length=254, unique=True, verbose_name='Электронная почта')),
                ('role', models.CharField(choices=[('user', 'Пользователь'), ('admin', 'Администратор')], default='user', help_text='Уровень доступа пользователя', max_length=5, verbose_name='Роль пользователя')),
                ('avatar', models.ImageField(blank=True, help_text='Загрузите аватарку или фото', null=True, upload_to='avatars/', verbose_name='Аватарка или фото')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ('id', 'username'),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите название ингредиента', max_length=128, unique=True, verbose_name='Название ингредиента')),
                ('measurement_unit', models.CharField(help_text='Введите единицу измерения', max_length=64, verbose_name='Единица измерения')),
            ],
            options={
                'verbose_name': 'Ингредиент',
                'verbose_name_plural': 'Ингредиенты',
                'ordering': ('name',),
                'default_related_name': 'ingredient',
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Придумайте название для рецепта', max_length=256, verbose_name='Название')),
                ('text', models.TextField(help_text='Опишите последовательность действий', verbose_name='Текстовое описание рецепта')),
                ('cooking_time', models.PositiveSmallIntegerField(default=1, help_text='Укажите время приготовления блюда в минутах', validators=[django.core.validators.MinValueValidator(1, 'Любой рецепт требует как минимум 1-й минуты!'), django.core.validators.MaxValueValidator(1440, 'Вы наверное ошиблись? Время пригтовления блюда должно быть менее суток!')], verbose_name='Время приготовления')),
                ('image', models.ImageField(help_text='Загрузите подходящее фото блюда', upload_to='recipes/', verbose_name='Фото блюда')),
                ('pub_date', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Дата и время публикации рецепта')),
                ('author', models.ForeignKey(help_text='Укажите автора рецепта', on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
            options={
                'verbose_name': 'Рецепт',
                'verbose_name_plural': 'Рецепты',
                'ordering': ['-pub_date'],
                'default_related_name': 'recipes',
            },
        ),
        migrations.CreateModel(
            name='ShortLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_url', models.URLField(unique=True)),
                ('short_code', models.CharField(max_length=10, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Укажите название тега', max_length=32, unique=True, verbose_name='Название тега')),
                ('slug', models.SlugField(help_text='Укажите слаг тега', max_length=32, unique=True, verbose_name='Уникальный слаг тега')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author', to=settings.AUTH_USER_MODEL, verbose_name='Автор рецеата')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL, verbose_name='Подписчик')),
            ],
            options={
                'verbose_name': 'Подписка',
                'verbose_name_plural': 'Подписки',
            },
        ),
        migrations.CreateModel(
            name='ShoppingList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время добавления')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shoppinglists', to='api.recipe', verbose_name='Рецепт')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shoppinglists', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Список покупок',
                'verbose_name_plural': 'Списки покупок',
                'abstract': False,
                'default_related_name': 'shoppinglists',
            },
        ),
        migrations.CreateModel(
            name='RecipeIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveSmallIntegerField(help_text='Укажите количество ингредиента в рецепте', validators=[django.core.validators.MinValueValidator(1, 'Количество ингредиента в рецепте должно быть равно хотя бы 1, и не превышать значение 20000 единиц'), django.core.validators.MaxValueValidator(20000, 'Количество ингредиента в рецепте должно быть равно хотя бы 1, и не превышать значение 20000 единиц')], verbose_name='Количество ингредиента в рецепте')),
                ('ingredient', models.ForeignKey(help_text='Укажите ингредиент, используемый в рецепте', on_delete=django.db.models.deletion.CASCADE, related_name='ingredients_in_recipe', to='api.ingredient', verbose_name='Ингредиент')),
                ('recipe', models.ForeignKey(help_text='Укажите рецепт, к которому относится ингредиент', on_delete=django.db.models.deletion.CASCADE, related_name='ingredients_in_recipe', to='api.recipe', verbose_name='Рецепт')),
            ],
            options={
                'verbose_name': 'Ингредиент в рецепте',
                'verbose_name_plural': 'Ингредиенты в рецепте',
                'ordering': ('recipe',),
                'default_related_name': 'ingredients_in_recipe',
            },
        ),
        migrations.AddField(
            model_name='recipe',
            name='ingredients',
            field=models.ManyToManyField(help_text='Укажите список требуемых ингредиентов', related_name='recipes', through='api.RecipeIngredient', to='api.Ingredient', verbose_name='Ингредиент'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='tags',
            field=models.ManyToManyField(help_text='Нужно указать хотя бы один тег', related_name='recipes', to='api.Tag', verbose_name='Тег'),
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время добавления')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to='api.recipe', verbose_name='Рецепт')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Избранное',
                'verbose_name_plural': 'Избранное',
                'abstract': False,
                'default_related_name': 'favorites',
            },
        ),
        migrations.AddConstraint(
            model_name='subscription',
            constraint=models.UniqueConstraint(fields=('user', 'author'), name='unique_user_author'),
        ),
        migrations.AddConstraint(
            model_name='shoppinglist',
            constraint=models.UniqueConstraint(fields=('user', 'recipe'), name='shoppinglist_user_recipe_unique'),
        ),
        migrations.AddConstraint(
            model_name='recipeingredient',
            constraint=models.UniqueConstraint(fields=('recipe', 'ingredient'), name='unique_recipe_ingredient'),
        ),
        migrations.AddConstraint(
            model_name='favorite',
            constraint=models.UniqueConstraint(fields=('user', 'recipe'), name='favorite_user_recipe_unique'),
        ),
    ]
