name: Main Foodgram workflow

on:
  push:
    branches: ['*']
jobs:

  backend_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    services:
      postgres:
        image: postgres:13.10-alpine
        env:
          POSTGRES_USER: foodgram_user
          POSTGRES_PASSWORD: foodgram_password
          POSTGRES_DB: foodgram
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r ./backend/requirements.txt 
      - name: Test with flake8
        env:
          POSTGRES_USER: foodgram_user
          POSTGRES_PASSWORD: foodgram_password
          POSTGRES_DB: foodgram
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          python -m flake8 backend/
          cd backend/

  build_backend_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: backend_tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

  frontend_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up nodeJS
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Update dependencies
        run: |
          cd frontend/
          npm install -g npm-check-updates
          ncu -u
          npm install
      - name: Replace outdated Babel plugins
        run: |
          cd frontend/
          sed -i 's/@babel\/plugin-proposal-unicode-property-regex/@babel\/plugin-transform-unicode-property-regex/g' .babelrc || true
          sed -i 's/@babel\/plugin-proposal-private-methods/@babel\/plugin-transform-private-methods/g' .babelrc || true
          sed -i 's/@babel\/plugin-proposal-numeric-separator/@babel\/plugin-transform-numeric-separator/g' .babelrc || true
          sed -i 's/@babel\/plugin-proposal-logical-assignment-operators/@babel\/plugin-transform-logical-assignment-operators/g' .babelrc || true
          sed -i 's/@babel\/plugin-proposal-json-strings/@babel\/plugin-transform-json-strings/g' .babelrc || true
          sed -i 's/@babel\/plugin-proposal-export-namespace-from/@babel\/plugin-transform-export-namespace-from/g' .babelrc || true
          sed -i 's/@babel\/plugin-proposal-dynamic-import/@babel\/plugin-transform-dynamic-import/g' .babelrc || true
          sed -i 's/@babel\/plugin-proposal-class-properties/@babel\/plugin-transform-class-properties/g' .babelrc || true
          sed -i 's/@babel\/plugin-proposal-private-property-in-object/@babel\/plugin-transform-private-property-in-object/g' .babelrc || true
          sed -i 's/@babel\/plugin-proposal-optional-catch-binding/@babel\/plugin-transform-optional-catch-binding/g' .babelrc || true
          sed -i 's/@babel\/plugin-proposal-class-static-block/@babel\/plugin-transform-class-static-block/g' .babelrc || true
          sed -i 's/@babel\/plugin-proposal-nullish-coalescing-operator/@babel\/plugin-transform-nullish-coalescing-operator/g' .babelrc || true
      - name: Install timers-browserify
        run: |
          cd frontend/
          npm install timers-browserify
      - name: Configure Jest
        run: |
          cd frontend/
          echo "require('timers-browserify');" >> jest.config.js
      - name: Test frontend
        run: |
          cd frontend/
          npm run test

  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./infra/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_gateway:latest